generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model Product {
//   id        String     @id @default(auto()) @map("_id") @db.ObjectId
//   imageUrl  String
//   title      String
//   price     Int
//   catSlug   String
//   category  Category   @relation(fields: [catSlug], references: [slug])
//   coffee    Coffee?
//   goods     Good?
//   features    Boolean @default(false)
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt
//   CartItem  CartItem[]

//   @@map("products")
// }

model Category {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  slug  String @unique

  // product Product[]

  @@map("category")
}

model Coffee {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl  String
  title     String
  price     Int
  roast     String
  level     Int
  type       String?
  ingredient  Json[]
  region     String?
  origins    Json[]
 
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  

  @@map("coffee")
}

// model Good {
//   id          String  @id @default(auto()) @map("_id") @db.ObjectId
//   berwing     Json[]
//   merch       Json[]
  
 
//   productId   String   @unique @db.ObjectId
//   product     Product @relation(fields: [productId], references: [id])

//   @@map("goods")
// }

// model Cart {
//   id    String     @id @default(auto()) @map("_id") @db.ObjectId
//   items CartItem[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("carts")
// }

// model CartItem {
//   id        String  @id @default(auto()) @map("_id") @db.ObjectId
//   productId String  @db.ObjectId
//   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
//   quantity  Int
//   cartId    String  @db.ObjectId
//   cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

//   @@map("cartItems")
// }

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  hashedPassword String?
  email          String?   @unique
  emailVerified  DateTime? @default(now())
  image          String?
  address        String?   @default("United States")
  isAdmin        Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  order          Order[]

  @@map("user")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationToken")
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  price     Int
  products  Json[]
  status    String
  intent_id String?  @unique
  user      User     @relation(fields: [userEmail], references: [email])
  userEmail String

  @@map("order")
}
